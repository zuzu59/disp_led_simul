function bit_isset(x, p)
  -- b = (1 << (p-1))
  -- return (x & b) > 0
  return ((math.floor(x/2^(p-1)) % 2) == 1)
end

function plotchar3x5(c, x, y, fg, bg) -- Plot character c 3x5 bits at x, y in hue
  for i = 1, 5 do
    for j = 1, 3 do
      if bit_isset(c[i], 3 - j) then
        zmatrix[x + i - 1][y + 5 - j + 1] = fg
      else
        zmatrix[x + i - 1][y + 5 - j + 1] = bg
      end
    end
  end
end

function plotstring3x5(s, x, y, fg, bg) -- Plot a string of characters at x, y in hue
  for i = 1, #s do
    -- if x + ((i - 1) * 8) >= -7 and x + ((i - 1) * 8) <= displayWidth then
    plotchar3x5(getCharData3x5(string.sub(s, i, i)), x + ((i - 1) * 4), y, fg, bg) 
  end
end


dofile("bigmatrixfont.lua")
function plotchar8x8(c, x, y, fg, bg) -- Plot character c 8x8 bits at x, y in hue
  for i = 1, 8 do
    for j = 1, 8 do
      if bit_isset(c[i], 8 - j) then
        zmatrix[x + i - 1][y + 8 - j + 1] = fg
      else
        zmatrix[x + i - 1][y + 8 - j + 1] = bg
      end
    end
  end
end

function plotstring8x8(s, x, y, fg, bg) -- Plot a string of characters at x, y in hue
  for i = 1, #s do
    -- if x + ((i - 1) * 8) >= -7 and x + ((i - 1) * 8) <= displayWidth then
    plotchar8x8(getCharData8x8(string.sub(s, i, i)), x + ((i - 1) * 8), y, fg, bg) 
  end
end


-- Lua Tom Thumb font
-- A very small 3 bits wide, 5 bits high bitmap font
-- Tom Thumb font is copyright (c) 2010 Robey Pointer (https://robey.lag.net/2010/01/23/tiny-monospace-font.html)
-- Conversion to Lua is copyright (c) 2017 Rudi Niemeijer
-- CC0 or CC-BY 3.0 license, whichever suits your needs

-- Usage: link this file to your Lua program with 'dofile("tomthumbfont.lua")'
--        Then call getCharData3x5(c) with the character which needs converting
--        A table type is returned, with in it 5 bytes that each contain 3 bits of character data

function getCharData3x5(c) -- Return a table containing 5 bytes of 3 set bits 0b111
  local charSet3x5 = {
    { 0x0, 0x0, 0x0, 0x0, 0x0}, -- ' '
    { 0x2, 0x2, 0x2, 0x0, 0x2}, -- '!'
    { 0x5, 0x5, 0x0, 0x0, 0x0}, -- '"'
    { 0x5, 0x7, 0x5, 0x7, 0x5}, -- '#'
    { 0x3, 0x6, 0x3, 0x6, 0x2}, -- ' '
    { 0x4, 0x1, 0x2, 0x4, 0x1}, -- '%'
    { 0x6, 0x6, 0x7, 0x5, 0x3}, -- ''
    { 0x2, 0x2, 0x0, 0x0, 0x0}, -- '''
    { 0x1, 0x2, 0x2, 0x2, 0x1}, -- '('
    { 0x4, 0x2, 0x2, 0x2, 0x4}, -- ')'
    { 0x5, 0x2, 0x5, 0x0, 0x0}, -- ''
    { 0x0, 0x2, 0x7, 0x2, 0x0}, -- '+'
    { 0x0, 0x0, 0x0, 0x2, 0x4}, -- ','
    { 0x0, 0x0, 0x7, 0x0, 0x0}, -- '-'
    { 0x0, 0x0, 0x0, 0x0, 0x2}, -- '.'
    { 0x1, 0x1, 0x2, 0x3, 0x3}, -- '/'
    { 0x7, 0x5, 0x5, 0x5, 0x7}, -- '0'
    { 0x6, 0x2, 0x2, 0x2, 0x7}, -- '1'
    { 0x7, 0x1, 0x7, 0x4, 0x7}, -- '2'
    { 0x7, 0x1, 0x7, 0x1, 0x7}, -- '3'
    { 0x1, 0x3, 0x5, 0x7, 0x1}, -- '4'
    { 0x7, 0x4, 0x7, 0x1, 0x7}, -- '5'
    { 0x2, 0x4, 0x7, 0x5, 0x7}, -- '6'
    { 0x7, 0x1, 0x2, 0x4, 0x4}, -- '7'
    { 0x7, 0x5, 0x7, 0x5, 0x7}, -- '8'
    { 0x7, 0x5, 0x7, 0x1, 0x2}, -- '9'
    { 0x0, 0x2, 0x0, 0x2, 0x0}, -- ':'
    { 0x0, 0x2, 0x0, 0x6, 0x2}, -- ';'
    { 0x0, 0x0, 0x1, 0x2, 0x1}, -- '<'
    { 0x0, 0x7, 0x0, 0x7, 0x0}, -- '='
    { 0x0, 0x0, 0x2, 0x1, 0x2}, -- '>'
    { 0x7, 0x1, 0x3, 0x0, 0x2}, -- '?'
    { 0x2, 0x5, 0x7, 0x5, 0x3}, -- '@'
    { 0x2, 0x5, 0x7, 0x5, 0x5}, -- 'A'
    { 0x6, 0x5, 0x6, 0x5, 0x6}, -- 'B'
    { 0x3, 0x4, 0x4, 0x4, 0x3}, -- 'C'
    { 0x6, 0x5, 0x5, 0x5, 0x6}, -- 'D'
    { 0x7, 0x4, 0x7, 0x4, 0x7}, -- 'E'
    { 0x7, 0x4, 0x7, 0x4, 0x4}, -- 'F'
    { 0x3, 0x4, 0x7, 0x5, 0x3}, -- 'G'
    { 0x5, 0x5, 0x7, 0x5, 0x5}, -- 'H'
    { 0x7, 0x2, 0x2, 0x2, 0x7}, -- 'I'
    { 0x1, 0x1, 0x1, 0x5, 0x2}, -- 'J'
    { 0x5, 0x5, 0x6, 0x5, 0x5}, -- 'K'
    { 0x4, 0x4, 0x4, 0x4, 0x7}, -- 'L'
    { 0x5, 0x7, 0x7, 0x5, 0x5}, -- 'M'
    { 0x5, 0x7, 0x7, 0x7, 0x5}, -- 'N'
    { 0x2, 0x5, 0x5, 0x5, 0x2}, -- 'O'
    { 0x6, 0x5, 0x6, 0x4, 0x4}, -- 'P'
    { 0x2, 0x5, 0x5, 0x7, 0x3}, -- 'Q'
    { 0x6, 0x5, 0x6, 0x5, 0x5}, -- 'R'
    { 0x3, 0x4, 0x2, 0x1, 0x6}, -- 'S'
    { 0x7, 0x2, 0x2, 0x2, 0x2}, -- 'T'
    { 0x5, 0x5, 0x5, 0x5, 0x3}, -- 'U'
    { 0x5, 0x5, 0x5, 0x2, 0x2}, -- 'V'
    { 0x5, 0x5, 0x7, 0x7, 0x5}, -- 'W'
    { 0x5, 0x5, 0x2, 0x5, 0x5}, -- 'X'
    { 0x5, 0x5, 0x2, 0x2, 0x2}, -- 'Y'
    { 0x7, 0x1, 0x2, 0x4, 0x7}, -- 'Z'
    { 0x7, 0x4, 0x4, 0x4, 0x7}, -- '['
    { 0x0, 0x4, 0x2, 0x1, 0x0}, -- '\'
    { 0x7, 0x1, 0x1, 0x1, 0x7}, -- ']'
    { 0x2, 0x5, 0x0, 0x0, 0x0}, -- '^'
    { 0x0, 0x0, 0x0, 0x0, 0x7}, -- '_'
    { 0x4, 0x2, 0x0, 0x0, 0x0}, -- '`'
    { 0x0, 0x6, 0x3, 0x5, 0x7}, -- 'a'
    { 0x4, 0x6, 0x5, 0x5, 0x6}, -- 'b'
    { 0x0, 0x3, 0x4, 0x4, 0x3}, -- 'c'
    { 0x1, 0x3, 0x5, 0x5, 0x3}, -- 'd'
    { 0x0, 0x3, 0x5, 0x6, 0x3}, -- 'e'
    { 0x1, 0x2, 0x7, 0x2, 0x2}, -- 'f'
    { 0x0, 0x3, 0x7, 0x1, 0x6}, -- 'g'
    { 0x4, 0x6, 0x5, 0x5, 0x5}, -- 'h'
    { 0x2, 0x0, 0x2, 0x2, 0x2}, -- 'i'
    { 0x1, 0x0, 0x1, 0x5, 0x2}, -- 'j'
    { 0x4, 0x5, 0x6, 0x6, 0x5}, -- 'k'
    { 0x6, 0x2, 0x2, 0x2, 0x7}, -- 'l'
    { 0x0, 0x7, 0x7, 0x7, 0x5}, -- 'm'
    { 0x0, 0x6, 0x5, 0x5, 0x5}, -- 'n'
    { 0x0, 0x2, 0x5, 0x5, 0x2}, -- 'o'
    { 0x0, 0x6, 0x5, 0x6, 0x4}, -- 'p'
    { 0x0, 0x3, 0x5, 0x3, 0x1}, -- 'q'
    { 0x0, 0x3, 0x4, 0x4, 0x4}, -- 'r'
    { 0x0, 0x3, 0x6, 0x3, 0x6}, -- 's'
    { 0x2, 0x7, 0x2, 0x2, 0x3}, -- 't'
    { 0x0, 0x5, 0x5, 0x5, 0x3}, -- 'u'
    { 0x0, 0x5, 0x5, 0x7, 0x2}, -- 'v'
    { 0x0, 0x5, 0x7, 0x7, 0x7}, -- 'w'
    { 0x0, 0x5, 0x2, 0x2, 0x5}, -- 'x'
    { 0x0, 0x5, 0x3, 0x1, 0x2}, -- 'y'
    { 0x0, 0x7, 0x3, 0x6, 0x7}, -- 'z'
    { 0x3, 0x2, 0x4, 0x2, 0x3}, -- '{'
    { 0x2, 0x2, 0x0, 0x2, 0x2}, -- '|'
    { 0x6, 0x2, 0x1, 0x2, 0x6}, -- '}'
    { 0x3, 0x6, 0x0, 0x0, 0x0}, -- '~'
    { 0x7, 0x7, 0x7, 0x7, 0x7} -- ' '    
  }

  local b = string.byte(c) - string.byte(' ') + 1
  if b >= 1 and b <= #charSet3x5 then
    return charSet3x5[b]
  else
    return charSet3x5[1]
  end
end



-- Big Matrix font
-- A fat matrix font like you would expect in an Apple II in a 8 by 8 matrix
-- Copyright (c) 2017 Rudi Niemeijer
-- MIT License

-- Usage: link this file to your Lua program with 'dofile("bigmatrixfont.lua")'
--        Then call getCharData8x8(c) with the character which needs converting
--        A table type is returned, with in it 8 bytes that each contain 8 bits of character data

function getCharData8x8(c) -- Return a table containing 8x8 bits
  local charSet8x8 = {
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, -- ' '   1
    { 0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00 }, -- '!'   2
    { 0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00 }, -- '"'   3
    { 0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00 }, -- '#'   4
    { 0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00 }, -- '$'
    { 0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00 }, -- '%'
    { 0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00 }, -- '&'
    { 0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 }, -- '''
    { 0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00 }, -- '('
    { 0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00 }, -- ')'  10
    { 0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08 }, -- '*'
    { 0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00 }, -- '+'
    { 0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00 }, -- ','
    { 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00 }, -- '-'
    { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00 }, -- '.'
    { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 }, -- '/'
    { 0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00 }, -- '0'  17
    { 0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00 }, -- '1'
    { 0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00 }, -- '2'
    { 0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 }, -- '3'
    { 0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00 }, -- '4'
    { 0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00 }, -- '5'
    { 0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00 }, -- '6'
    { 0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00 }, -- '7'
    { 0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00 }, -- '8'
    { 0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00 }, -- '9'
    { 0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00 }, -- ':'
    { 0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00 }, -- ';'
    { 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00 }, -- '<'
    { 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00 }, -- '='
    { 0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00 }, -- '>'
    { 0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00 }, -- '?'
    { 0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00 }, -- '@'
    { 0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00 }, -- 'A'
    { 0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00 }, -- 'B'
    { 0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00 }, -- 'C'
    { 0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00 }, -- 'D'
    { 0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00 }, -- 'E'
    { 0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00 }, -- 'F'
    { 0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00 }, -- 'G'
    { 0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00 }, -- 'H'
    { 0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00 }, -- 'I'
    { 0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00 }, -- 'J'
    { 0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00 }, -- 'K'
    { 0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00 }, -- 'L'
    { 0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00 }, -- 'M'
    { 0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00 }, -- 'N'
    { 0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00 }, -- 'O'
    { 0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00 }, -- 'P'
    { 0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00 }, -- 'Q'
    { 0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00 }, -- 'R'
    { 0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00 }, -- 'S'
    { 0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00 }, -- 'T'
    { 0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00 }, -- 'U'
    { 0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00 }, -- 'V'
    { 0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00 }, -- 'W'
    { 0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00 }, -- 'X'
    { 0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00 }, -- 'Y'
    { 0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00 }, -- 'Z'
    { 0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00 }, -- '['
    { 0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00 }, -- '\'
    { 0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00 }, -- ']'
    { 0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00 }, -- '^'
    { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 }, -- '_'
    { 0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00 }, -- '`'
    { 0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00 }, -- 'a'
    { 0x41, 0x7F, 0x3F, 0x48, 0x48, 0x78, 0x30, 0x00 }, -- 'b'
    { 0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00 }, -- 'c'
    { 0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00 }, -- 'd'
    { 0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00 }, -- 'e'
    { 0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00 }, -- 'f'
    { 0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00 }, -- 'g'
    { 0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00 }, -- 'h'
    { 0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00 }, -- 'i'
    { 0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00 }, -- 'j'
    { 0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00 }, -- 'k'
    { 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00 }, -- 'l'
    { 0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78, 0x00 }, -- 'm'
    { 0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00 }, -- 'n'
    { 0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00 }, -- 'o'
    { 0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00 }, -- 'p'
    { 0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00 }, -- 'q'
    { 0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00 }, -- 'r'
    { 0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00 }, -- 's'
    { 0x00, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00 }, -- 't'
    { 0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00 }, -- 'u'
    { 0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00 }, -- 'v'
    { 0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00 }, -- 'w'
    { 0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00 }, -- 'x'
    { 0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00 }, -- 'y'
    { 0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00 }, -- 'z'
    { 0x08, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00 }, -- '{'
    { 0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00 }, -- '|'
    { 0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00 }, -- '}'
    { 0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00 }} -- '~'

  b = string.byte(c) - string.byte(' ') + 1
  if b >= 1 and b <= #charSet8x8 then
    r = charSet8x8[b]
  else
    r = charSet8x8[1]
  end
  charSet8x8 = {}
  return r
end
